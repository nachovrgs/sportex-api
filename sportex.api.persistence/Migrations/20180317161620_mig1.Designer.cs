// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using sportex.api.persistence;
using System;

namespace sportex.api.persistance.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20180317161620_mig1")]
    partial class mig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("sportex.api.domain.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("LastAccess");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Password");

                    b.Property<int>("Status");

                    b.Property<string>("Username");

                    b.HasKey("ID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("sportex.api.domain.AdminProfile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("MailAddress");

                    b.Property<string>("PicturePath");

                    b.Property<int>("ProfileId");

                    b.Property<int>("Status");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.ToTable("AdminProfiles");
                });

            modelBuilder.Entity("sportex.api.domain.AdminRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AdminProfileID");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("AdminProfileID");

                    b.ToTable("AdminRoles");
                });

            modelBuilder.Entity("sportex.api.domain.StandardProfile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("MailAddress");

                    b.Property<string>("PicturePath");

                    b.Property<int>("ProfileId");

                    b.Property<int>("Sex");

                    b.Property<int>("Status");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.ToTable("StandardProfiles");
                });

            modelBuilder.Entity("sportex.api.domain.AdminProfile", b =>
                {
                    b.HasOne("sportex.api.domain.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID");
                });

            modelBuilder.Entity("sportex.api.domain.AdminRole", b =>
                {
                    b.HasOne("sportex.api.domain.AdminProfile")
                        .WithMany("Roles")
                        .HasForeignKey("AdminProfileID");
                });

            modelBuilder.Entity("sportex.api.domain.StandardProfile", b =>
                {
                    b.HasOne("sportex.api.domain.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID");
                });
#pragma warning restore 612, 618
        }
    }
}
